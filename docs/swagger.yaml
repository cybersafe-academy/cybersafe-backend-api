definitions:
  authentication.FinishSignupRequest:
    properties:
      birthDate:
        type: string
      cpf:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  authentication.FirstAccessRequest:
    properties:
      email:
        type: string
    type: object
  authentication.ForgotPasswordRequest:
    properties:
      email:
        type: string
    type: object
  authentication.LoginRequest:
    properties:
      cpf:
        type: string
      password:
        type: string
    type: object
  authentication.TokenContent:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: number
      tokenType:
        type: string
    type: object
  authentication.UpdatePasswordRequest:
    properties:
      password:
        type: string
    type: object
  companies.RequestContent:
    properties:
      cnpj:
        type: string
      email:
        type: string
      legalName:
        type: string
      phone:
        type: string
      tradeName:
        type: string
    type: object
  companies.ResponseContent:
    properties:
      cnpj:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: string
      legalName:
        type: string
      phone:
        type: string
      tradeName:
        type: string
      updatedAt:
        type: string
    type: object
  components.Error:
    properties:
      code:
        example: 400
        type: integer
      description:
        example: Bad Request
        type: string
      error_details:
        items:
          $ref: '#/definitions/components.ErrorDetail'
        type: array
    type: object
  components.ErrorDetail:
    properties:
      attribute:
        example: field name with error or key for help messages
        type: string
      messages:
        example:
        - explanatory messages about the attribute error
        items:
          type: string
        type: array
    type: object
  components.Response:
    properties:
      error:
        $ref: '#/definitions/components.Error'
    type: object
  courses.ContentRequest:
    properties:
      URL:
        type: string
      contentType:
        type: string
      title:
        type: string
    type: object
  courses.ContentResponse:
    properties:
      URL:
        type: string
      contentType:
        type: string
      id:
        type: string
      title:
        type: string
    type: object
  courses.RequestContent:
    properties:
      contentInHours:
        type: number
      contents:
        items:
          $ref: '#/definitions/courses.ContentRequest'
        type: array
      description:
        type: string
      level:
        type: string
      thumbnailURL:
        type: string
      title:
        type: string
    type: object
  courses.ResponseContent:
    properties:
      contentInHours:
        type: number
      contents:
        items:
          $ref: '#/definitions/courses.ContentResponse'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: string
      level:
        type: string
      thumbnailURL:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  pagination.PaginationData:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      page:
        type: integer
    type: object
  users.PreSignupRequest:
    properties:
      email:
        type: string
      role:
        type: string
    type: object
  users.RequestContent:
    properties:
      birthDate:
        type: string
      cpf:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  users.ResponseContent:
    properties:
      birthDate:
        type: string
      cpf:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact:
    email: support@cybersafe.com
    name: CyberSafe support team
    url: http://cybersafe.academy.com/support/contact
  description: This REST API contains all services for the CyberSafe plataform.
  license:
    name: MIT
    url: https://opensource.org/license/mit/
  termsOfService: http://cybersafe.academy.com/support/terms
  title: CyberSafe Academy API
  version: "1.0"
paths:
  /auth/finish-signup:
    post:
      consumes:
      - application/json
      description: Checks the token on the request and fills up remaining user info
      parameters:
      - description: User verification token
        in: query
        name: t
        required: true
        type: string
      - description: Finish signup info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication.FinishSignupRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
      summary: Fills up remaining user info
      tags:
      - Authentication
  /auth/first-access:
    post:
      consumes:
      - application/json
      description: Checks if the user was pre-registered and sends an e-mail to signup
      parameters:
      - description: First access verification info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication.FirstAccessRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
      summary: Checks if the user was pre-registered
      tags:
      - Authentication
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Receives the user email and if the email is valid, send a verification
        via email
      parameters:
      - description: Reset password info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
      summary: Request new password via e-mail
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates an user and generates an access token
      parameters:
      - description: User login information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.TokenContent'
        "400":
          description: Bad Request
      summary: User login
      tags:
      - Authentication
  /auth/logoff:
    post:
      description: Logs off an user
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      security:
      - Bearer: []
      - Language: []
      summary: User logoff
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the token for an authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.TokenContent'
        "400":
          description: Bad Request
      security:
      - Bearer: []
      - Language: []
      summary: User login refresh
      tags:
      - Authentication
  /auth/update-password:
    post:
      consumes:
      - application/json
      description: Checks the token on the request and updates the password
      parameters:
      - description: User verification token
        in: query
        name: t
        required: true
        type: string
      - description: Update password info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
      summary: Update password after email verification
      tags:
      - Authentication
  /companies:
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit of elements per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/pagination.PaginationData'
              - properties:
                  data:
                    $ref: '#/definitions/companies.ResponseContent'
                type: object
            type: array
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: List companies with paginated response
      tags:
      - Company
    post:
      parameters:
      - description: Request payload for creating a new company
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/companies.RequestContent'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/companies.ResponseContent'
        "409":
          description: Conflict
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Create a company
      tags:
      - Company
  /courses:
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit of elements per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/pagination.PaginationData'
              - properties:
                  data:
                    $ref: '#/definitions/courses.ResponseContent'
                type: object
            type: array
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: List courses with paginated response
      tags:
      - Course
    post:
      parameters:
      - description: Request payload for creating a new course
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/courses.RequestContent'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Create a course
      tags:
      - Course
  /courses/{id}:
    delete:
      parameters:
      - description: ID of the course to be deleted
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: OK
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Delete a course by ID
      tags:
      - Course
    get:
      parameters:
      - description: ID of the course to be retrieved
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get course by ID
      tags:
      - Course
    put:
      parameters:
      - description: Request payload for updating course information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/courses.RequestContent'
      - description: ID of course to be updated
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.ResponseContent'
        "400":
          description: Bad Request
        "404":
          description: Course not found
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Update course by ID
      tags:
      - Course
  /users:
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit of elements per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/pagination.PaginationData'
              - properties:
                  data:
                    $ref: '#/definitions/users.ResponseContent'
                type: object
            type: array
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: List users with paginated response
      tags:
      - User
    post:
      parameters:
      - description: Request payload for creating a new user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.RequestContent'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Create a user
      tags:
      - User
  /users/{id}:
    delete:
      parameters:
      - description: ID of the user to be deleted
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Delete a user by ID
      tags:
      - User
    get:
      parameters:
      - description: ID of the user to be retrieved
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get user by ID
      tags:
      - User
    put:
      parameters:
      - description: Request payload for updating user information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.RequestContent'
      - description: ID of user to be updated
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.ResponseContent'
        "400":
          description: Bad Request
        "404":
          description: User not found
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Update user by ID
      tags:
      - User
  /users/me:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get authenticated user
      tags:
      - User
  /users/pre-signup:
    post:
      parameters:
      - description: Request payload for pre signup an user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.PreSignupRequest'
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
      security:
      - Bearer: []
      - Language: []
      summary: Pre signup an user
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Insert the token withou "Bearer" prefix.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
