definitions:
  analytics.AnalyticsDataResponse:
    properties:
      accuracyInQuizzes:
        type: number
      courseCompletion:
        type: number
      mbtiCount:
        items:
          $ref: '#/definitions/cybersafe-backend-api_internal_api_handlers_analytics.MBTICount'
        type: array
      numberOfUsers:
        type: integer
    type: object
  authentication.FinishSignupRequest:
    properties:
      birthDate:
        type: string
      cpf:
        type: string
      name:
        type: string
      password:
        type: string
      profilePicture:
        type: string
    type: object
  authentication.FirstAccessRequest:
    properties:
      email:
        type: string
    type: object
  authentication.ForgotPasswordRequest:
    properties:
      email:
        type: string
    type: object
  authentication.LoginRequest:
    properties:
      cpf:
        type: string
      password:
        type: string
    type: object
  authentication.TokenContent:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: number
      tokenType:
        type: string
    type: object
  authentication.UpdatePasswordRequest:
    properties:
      password:
        type: string
    type: object
  companies.RequestContent:
    properties:
      cnpj:
        type: string
      email:
        type: string
      legalName:
        type: string
      phone:
        type: string
      tradeName:
        type: string
    type: object
  companies.ResponseContent:
    properties:
      cnpj:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: string
      legalName:
        type: string
      phone:
        type: string
      tradeName:
        type: string
      updatedAt:
        type: string
    type: object
  components.Error:
    properties:
      code:
        example: 400
        type: integer
      description:
        example: Bad Request
        type: string
      error_details:
        items:
          $ref: '#/definitions/components.ErrorDetail'
        type: array
    type: object
  components.ErrorDetail:
    properties:
      attribute:
        example: field name with error or key for help messages
        type: string
      messages:
        example:
        - explanatory messages about the attribute error
        items:
          type: string
        type: array
    type: object
  components.Response:
    properties:
      error:
        $ref: '#/definitions/components.Error'
    type: object
  cybersafe-backend-api_internal_api_handlers_analytics.MBTICount:
    properties:
      count:
        type: integer
      mbtiType:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  httpmodels.AddAnswerRequest:
    properties:
      answerID:
        type: string
      questionID:
        type: string
    type: object
  httpmodels.AddAnswersBatchRequest:
    properties:
      answers:
        items:
          $ref: '#/definitions/httpmodels.AddAnswerRequest'
        type: array
    type: object
  httpmodels.AnswerRequest:
    properties:
      isCorrect:
        type: boolean
      text:
        type: string
      text-pt-br:
        type: string
    type: object
  httpmodels.AnswerResponse:
    properties:
      id:
        type: string
      text:
        type: string
      text-pt-br:
        type: string
    type: object
  httpmodels.CategoryRequest:
    properties:
      name:
        type: string
    type: object
  httpmodels.CategoryResponse:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  httpmodels.CommentRequest:
    properties:
      text:
        type: string
    type: object
  httpmodels.CourseByCategoryResponse:
    additionalProperties:
      items:
        additionalProperties: {}
        type: object
      type: array
    type: object
  httpmodels.CourseCategoryResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  httpmodels.QuestionRequest:
    properties:
      answers:
        items:
          $ref: '#/definitions/httpmodels.AnswerRequest'
        type: array
      wording:
        type: string
      wording-pt-br:
        type: string
    type: object
  httpmodels.QuestionResponse:
    properties:
      answers:
        items:
          $ref: '#/definitions/httpmodels.AnswerResponse'
        type: array
      id:
        type: string
      wording:
        type: string
      wording-pt-br:
        type: string
    type: object
  httpmodels.RequestContent:
    properties:
      categoryID:
        type: string
      contentInHours:
        type: number
      contentURL:
        type: string
      description:
        type: string
      descriptionPtBr:
        type: string
      level:
        type: string
      questions:
        items:
          $ref: '#/definitions/httpmodels.QuestionRequest'
        type: array
      thumbnailURL:
        type: string
      title:
        type: string
      titlePtBr:
        type: string
    type: object
  httpmodels.ResponseContent:
    properties:
      avgRating:
        type: number
      category:
        $ref: '#/definitions/httpmodels.CourseCategoryResponse'
      contentInHours:
        type: number
      contentURL:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      descriptionPtBr:
        type: string
      id:
        type: string
      level:
        type: string
      questions:
        items:
          $ref: '#/definitions/httpmodels.QuestionResponse'
        type: array
      thumbnailURL:
        type: string
      title:
        type: string
      titlePtBr:
        type: string
      updatedAt:
        type: string
    type: object
  httpmodels.ReviewRequestContent:
    properties:
      comment:
        type: string
      rating:
        type: integer
    type: object
  httpmodels.ReviewResponse:
    properties:
      comment:
        type: string
      courseID:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      rating:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/httpmodels.UserReviewFields'
    type: object
  httpmodels.UserReviewFields:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  pagination.PaginationData:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      page:
        type: integer
    type: object
  users.CompanyResponse:
    properties:
      cnpj:
        type: string
      email:
        type: string
      id:
        type: string
      legalName:
        type: string
      phone:
        type: string
      tradeName:
        type: string
    type: object
  users.PersonalityTestRequest:
    properties:
      mbtiType:
        type: string
    type: object
  users.PreSignupRequest:
    properties:
      companyID:
        type: string
      email:
        type: string
      role:
        type: string
    type: object
  users.RequestContent:
    properties:
      birthDate:
        type: string
      companyID:
        type: string
      cpf:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      profilePictureURL:
        type: string
      role:
        type: string
    type: object
  users.ResponseContent:
    properties:
      birthDate:
        type: string
      company:
        $ref: '#/definitions/users.CompanyResponse'
      cpf:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: string
      name:
        type: string
      profilePictureURL:
        type: string
      role:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact:
    email: support@cybersafe.com
    name: CyberSafe support team
    url: http://cybersafe.academy.com/support/contact
  description: This REST API contains all services for the CyberSafe plataform.
  license:
    name: MIT
    url: https://opensource.org/license/mit/
  termsOfService: http://cybersafe.academy.com/support/terms
  title: CyberSafe Academy API
  version: "1.0"
paths:
  /analytics/data:
    get:
      consumes:
      - application/json
      description: Gets all analytics data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/analytics.AnalyticsDataResponse'
        "400":
          description: Bad Request
      security:
      - Bearer: []
      - Language: []
      summary: Data analytics
      tags:
      - Analytics
  /auth/finish-signup:
    post:
      consumes:
      - application/json
      description: Checks the token on the request and fills up remaining user info
      parameters:
      - description: User verification token
        in: query
        name: t
        required: true
        type: string
      - description: Finish signup info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication.FinishSignupRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
      summary: Fills up remaining user info
      tags:
      - Authentication
  /auth/first-access:
    post:
      consumes:
      - application/json
      description: Checks if the user was pre-registered and sends an e-mail to signup
      parameters:
      - description: First access verification info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication.FirstAccessRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
      summary: Checks if the user was pre-registered
      tags:
      - Authentication
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Receives the user email and if the email is valid, send a verification
        via email
      parameters:
      - description: Reset password info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
      summary: Request new password via e-mail
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates an user and generates an access token
      parameters:
      - description: User login information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.TokenContent'
        "400":
          description: Bad Request
      summary: User login
      tags:
      - Authentication
  /auth/logoff:
    post:
      description: Logs off an user
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      security:
      - Bearer: []
      - Language: []
      summary: User logoff
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the token for an authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.TokenContent'
        "400":
          description: Bad Request
      security:
      - Bearer: []
      - Language: []
      summary: User login refresh
      tags:
      - Authentication
  /auth/update-password:
    post:
      consumes:
      - application/json
      description: Checks the token on the request and updates the password
      parameters:
      - description: User verification token
        in: query
        name: t
        required: true
        type: string
      - description: Update password info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
      summary: Update password after email verification
      tags:
      - Authentication
  /companies:
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit of elements per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/pagination.PaginationData'
              - properties:
                  data:
                    $ref: '#/definitions/companies.ResponseContent'
                type: object
            type: array
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: List companies with paginated response
      tags:
      - Company
    post:
      parameters:
      - description: Request payload for creating a new company
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/companies.RequestContent'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/companies.ResponseContent'
        "409":
          description: Conflict
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Create a company
      tags:
      - Company
  /companies/{id}:
    delete:
      parameters:
      - description: ID of the company to be deleted
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Delete a company by ID
      tags:
      - Company
    get:
      parameters:
      - description: ID of the company to be retrieved
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/companies.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get company by ID
      tags:
      - Company
    put:
      parameters:
      - description: Request payload for updating company information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/companies.RequestContent'
      - description: ID of company to be updated
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/companies.ResponseContent'
        "400":
          description: Bad Request
        "404":
          description: Company not found
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Update company by ID
      tags:
      - Company
  /courses:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpmodels.CourseByCategoryResponse'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: List all courses grouped by category
      tags:
      - Course
    post:
      parameters:
      - description: Request payload for creating a new course
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/httpmodels.RequestContent'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpmodels.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Create a course
      tags:
      - Course
  /courses/{courseID}/comments/{commentID}/likes:
    post:
      parameters:
      - description: ID of course
        in: path
        name: courseID
        required: true
        type: string
      - description: ID of course
        in: path
        name: commentID
        required: true
        type: string
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Add like to comment
      tags:
      - Course
  /courses/{id}:
    delete:
      parameters:
      - description: ID of the course to be deleted
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Delete a course by ID
      tags:
      - Course
    get:
      parameters:
      - description: ID of the course to be retrieved
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpmodels.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get course by ID
      tags:
      - Course
    put:
      parameters:
      - description: Request payload for updating course information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/httpmodels.RequestContent'
      - description: ID of course to be updated
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpmodels.ResponseContent'
        "400":
          description: Bad Request
        "404":
          description: Course not found
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Update course by ID
      tags:
      - Course
  /courses/{id}/comments:
    get:
      parameters:
      - description: ID of course
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get comments by course
      tags:
      - Course
    post:
      parameters:
      - description: ID of course
        in: path
        name: id
        required: true
        type: string
      - description: Request payload for creating a comment
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/httpmodels.CommentRequest'
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Add a comment to a course
      tags:
      - Course
  /courses/{id}/enroll:
    post:
      parameters:
      - description: ID of course
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Enroll to a course
      tags:
      - Course
  /courses/{id}/enrollments:
    get:
      parameters:
      - description: ID of course
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get Enrollment info
      tags:
      - Course
  /courses/{id}/questions:
    get:
      parameters:
      - description: ID of course
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/httpmodels.QuestionResponse'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Course not found
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get the questions by the course ID
      tags:
      - Course
    post:
      parameters:
      - description: ID of course
        in: path
        name: id
        required: true
        type: string
      - description: Request payload for creating a review
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/httpmodels.AddAnswerRequest'
      responses:
        "204":
          description: No content
        "409":
          description: Conflict
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Add answer to question
      tags:
      - Course
  /courses/{id}/questions/batch:
    post:
      parameters:
      - description: ID of course
        in: path
        name: id
        required: true
        type: string
      - description: Request payload for adding answers
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/httpmodels.AddAnswersBatchRequest'
      responses:
        "200":
          description: OK
        "409":
          description: Conflict
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Add answers to questions
      tags:
      - Course
  /courses/{id}/reviews:
    get:
      parameters:
      - description: ID of course
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: No content
        "400":
          description: Bad Request
        "404":
          description: Course not found
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get the reviews by the course ID
      tags:
      - Course
    post:
      parameters:
      - description: ID of course
        in: path
        name: id
        required: true
        type: string
      - description: Request payload for creating a review
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/httpmodels.ReviewRequestContent'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpmodels.ReviewResponse'
        "409":
          description: Conflict
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Create review
      tags:
      - Course
  /courses/categories:
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit of elements per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/pagination.PaginationData'
              - properties:
                  data:
                    $ref: '#/definitions/httpmodels.CategoryResponse'
                type: object
            type: array
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: List categories with paginated response
      tags:
      - Course
    post:
      parameters:
      - description: Request payload for creating a course category
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/httpmodels.CategoryRequest'
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/httpmodels.CategoryResponse'
        "409":
          description: Conflict
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Create course category
      tags:
      - Course
  /courses/categories/{id}:
    delete:
      parameters:
      - description: ID of the category to be deleted
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: OK
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Delete a category by ID
      tags:
      - Course
    put:
      parameters:
      - description: Request payload for updating category information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/httpmodels.CategoryRequest'
      - description: ID of category to be updated
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpmodels.CategoryResponse'
        "400":
          description: Bad Request
        "404":
          description: Category not found
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Update category by ID
      tags:
      - Course
  /courses/enrolled:
    get:
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get enrolled courses
      tags:
      - Course
  /management:
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit of elements per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/pagination.PaginationData'
              - properties:
                  data:
                    $ref: '#/definitions/httpmodels.ResponseContent'
                type: object
            type: array
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: List courses with paginated response
      tags:
      - Course
  /users:
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit of elements per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/pagination.PaginationData'
              - properties:
                  data:
                    $ref: '#/definitions/users.ResponseContent'
                type: object
            type: array
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: List users with paginated response
      tags:
      - User
    post:
      parameters:
      - description: Request payload for creating a new user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.RequestContent'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Create a user
      tags:
      - User
  /users/{id}:
    delete:
      parameters:
      - description: ID of the user to be deleted
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Delete a user by ID
      tags:
      - User
    get:
      parameters:
      - description: ID of the user to be retrieved
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get user by ID
      tags:
      - User
    put:
      parameters:
      - description: Request payload for updating user information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.RequestContent'
      - description: ID of user to be updated
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.ResponseContent'
        "400":
          description: Bad Request
        "404":
          description: User not found
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Update user by ID
      tags:
      - User
  /users/me:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get authenticated user
      tags:
      - User
  /users/personality-test:
    post:
      parameters:
      - description: Request payload for personality test result
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.PersonalityTestRequest'
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
        "404":
          description: User not found
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Store personality test result
      tags:
      - User
  /users/pre-signup:
    post:
      parameters:
      - description: Request payload for pre signup an user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.PreSignupRequest'
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
      security:
      - Bearer: []
      - Language: []
      summary: Pre signup an user
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Insert the token without "Bearer" prefix.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
