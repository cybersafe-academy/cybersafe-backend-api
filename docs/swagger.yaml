definitions:
  authentication.LoginRequest:
    properties:
      cpf:
        type: string
      password:
        type: string
    type: object
  authentication.TokenContent:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: number
      tokenType:
        type: string
    type: object
  components.Error:
    properties:
      code:
        example: 400
        type: integer
      description:
        example: Bad Request
        type: string
      error_details:
        items:
          $ref: '#/definitions/components.ErrorDetail'
        type: array
      id:
        example: c77fa521-99b1-4c54-9a8d-4b6902912eb0
        type: string
    type: object
  components.ErrorDetail:
    properties:
      attribute:
        example: field name with error or key for help messages
        type: string
      messages:
        example:
        - explanatory messages about the attribute error
        items:
          type: string
        type: array
    type: object
  components.Response:
    properties:
      error:
        $ref: '#/definitions/components.Error'
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  pagination.PaginationData:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      page:
        type: integer
    type: object
  user.RequestContent:
    properties:
      age:
        type: integer
      cpf:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  user.ResponseContent:
    properties:
      age:
        type: integer
      cpf:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact:
    email: support@cybersafe.com
    name: CyberSafe support team
    url: http://cybersafe.academy.com/support/contact
  description: This REST API contains all services for the CyberSafe plataform.
  license:
    name: MIT
    url: https://opensource.org/license/mit/
  termsOfService: http://cybersafe.academy.com/support/terms
  title: CyberSafe Academy API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates an user and generates an access token
      parameters:
      - description: User login information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authentication.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.TokenContent'
        "400":
          description: Bad Request
      summary: User login
      tags:
      - Authentication
  /users:
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit of elements per page
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/pagination.PaginationData'
              - properties:
                  content:
                    $ref: '#/definitions/user.ResponseContent'
                type: object
            type: array
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: List users with paginated response
      tags:
      - User
    post:
      parameters:
      - description: Request payload for creating a new user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.RequestContent'
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/pagination.PaginationData'
              - properties:
                  content:
                    $ref: '#/definitions/user.ResponseContent'
                type: object
            type: array
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Create a user
      tags:
      - User
  /users/{id}:
    delete:
      parameters:
      - description: ID of the user to be deleted
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/pagination.PaginationData'
              - properties:
                  content:
                    $ref: '#/definitions/user.ResponseContent'
                type: object
            type: array
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Delete a user by ID
      tags:
      - User
    get:
      parameters:
      - description: ID of the user to be retrieved
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ResponseContent'
        "400":
          description: Bad Request
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Get user by ID
      tags:
      - User
    put:
      parameters:
      - description: Request payload for updating user information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.RequestContent'
      - description: ID of user to be updated
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ResponseContent'
        "400":
          description: Bad Request
        "404":
          description: User not found
        default:
          description: Standard error example object
          schema:
            $ref: '#/definitions/components.Response'
      security:
      - Bearer: []
      - Language: []
      summary: Update user by ID
      tags:
      - User
securityDefinitions:
  Bearer:
    description: 'Type "Bearer" followed by a space and JWT token. e.g: Bearer eyJhbGciO....'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
